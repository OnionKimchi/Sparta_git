# 학습 리포트 - 2025-05-04

## 학습 주제

Unity 개발 중 발생한 트러블슈팅 사례와 해결 과정

## 오늘 한 일

- 전날 미해결이었던 검 길이 증가 문제 해결
- 말풍선 관련 UI 출력 오류 간접적으로 해결
- Git 관련 캐시 문제 트러블슈팅
- Unity 환경의 특성상 비직관적인 원인으로 인한 문제를 다수 경험

## 주요 트러블슈팅 사례

### 1. 검 길이 증가 문제 해결

- 기존에는 `Start()` 메서드에서 한 번만 무기 길이를 설정했음
- 공격할 때마다 길이를 갱신해줘야 효과가 반영된다는 점을 놓쳤음
- 해결 방법: 무기 휘두르기 메서드 안의 가장 처음에 무기 길이 업데이트 함수를 호출하도록 수정
- 교훈: 무기 속성은 동적인 상황에서도 반영되도록 매번 갱신하는 로직이 필요

### 2. 말풍선 텍스트 출력 및 레이어 오류

- 텍스트가 말풍선 캔버스의 크기를 무시하고 잘리거나 출력 위치가 이상했음
- `Order in Layer` 값을 높여도 말풍선 아래에 깔리는 현상이 있었음
- 여러 방법으로 수정해도 해결되지 않다가 오브젝트를 완전히 삭제하고 새로 만들자 갑자기 정상 작동
- 문제는 해결되었지만 왜 해결되었는지는 불명확해 찝찝한 느낌

### 3. Git 캐시 및 용량 문제 해결

- 프로젝트가 점점 커지면서 이전에 잘 작동하던 기능들이 수정 중 고장나는 위험성을 인식
- 그래서 버전 관리를 위해 Git에 저장하려 했으나 프로젝트 용량이 너무 커서 Push 실패
- 검색을 통해 Unity의 캐시 파일(Library, Temp 등) 을 `.gitignore`에 등록하면 해결됨을 알게 됨
- 캐시 파일은 용량만 크고 버전 관리에 필요 없는 항목이므로 무시 처리해야 함
- 교훈: Unity 프로젝트는 처음부터 .gitignore를 잘 설정해두는 것이 매우 중요

## 느낀 점

- Unity의 UI 및 오브젝트 설정 문제는 코드가 아닌 구조와 에디터 환경에 좌우되는 경우가 많음
- 무작정 수정하기보단 매번 갱신해야 하는 시점을 코드 흐름 안에서 명확히 파악할 것
- Git 설정 실수도 프로젝트 규모가 커지면서 치명적인 병목이 될 수 있으니 초기 설정의 중요성을 인식함
