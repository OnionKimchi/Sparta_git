# 학습리포트 2025-07-30

## 오늘의 활동

- 코루틴 작성 중 트러블슈팅 경험
  - `yield return`을 빠뜨린 상태로 코루틴을 작성했다가 무한 루프에 빠져 유니티가 멈추는 문제 발생
  - 재현 원인: `IEnumerator` 함수 내부에서 조건 없이 루프를 돌리면서 `yield`를 하지 않아 메인 스레드를 계속 점유
  - 문제 해결 후, **코루틴의 흐름 제어에 있어 `yield`의 중요성**을 다시금 실감

## 새로 알게 된 점 / 느낀 점

- `yield return`이 없는 `IEnumerator`는 사실상 무한 실행 함수처럼 작동함  
- 특히 `while (true)` 같은 구조는 실수 시 에디터 전체가 얼어버릴 수 있으므로 주의가 필요
- 코루틴은 결국 메인 루프에서 프레임 단위로 분산 실행되는 구조이기 때문에,
  반드시 `yield` 구문으로 프레임을 넘겨줘야 안정적으로 작동함

## 느낀 점

- 코루틴은 편리하지만 구조를 잘못 잡으면 디버깅조차 어려운 버그로 이어질 수 있음
- "작동은 하지만 위험한 코드"가 얼마나 큰 리스크가 될 수 있는지 체감한 하루였음

## 내일 학습 계획

- 기존 코루틴 로직들을 다시 한번 점검해보고,  
  필요하다면 `async-await` 구조와 비교 분석해볼 예정
