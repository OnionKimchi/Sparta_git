## 학습리포트 2025-06-17

### 🛠️ 트러블슈팅

- 직관성이 떨어지는 충돌 영역 구현 방식

  - 상황: 팀원이 플레이어 주변의 충돌 영역을 코드 상에서 직접 구현하여 충돌 체크를 하도록 함.
  - 문제점:  
    - 일반적으로는 인스펙터에 콜라이더 오브젝트를 드래그하여 연결하는 방식이 직관적인데, 코드에서 직접 생성 및 제어하니 디버깅이 매우 어려워짐.
    - 충돌 영역 확인을 위해 Gizmo를 수동으로 그려야 했고, UI 상으로는 전혀 확인이 되지 않아 혼란이 컸음.
  - 원인: `RectTransform`의 `position`과 `offset`을 동시에 제어하며 좌표 계산 오류가 발생했음.
  - 결과 및 교훈:
    - 팀원의 코딩 스타일을 존중하지만, 굳이 더 복잡하고 눈에 보이지 않는 방식으로 구현할 필요가 있었는지 의문이 들었음.
    - 시각적 피드백이 중요한 UI 및 충돌 영역 작업에서는 최대한 에디터 친화적인 방식을 사용하는 게 좋다는 점을 다시 느꼈음.

### ✍️ 느낀 점

- 팀 프로젝트에서 각자의 스타일이 다르다는 걸 체감했고, 그 차이로 인해 협업 시 직관성이 낮아질 수 있다는 것을 경험함.
- 단순히 동작하는 코드보다, 협업과 유지보수가 쉬운 방식이 중요하다는 것을 다시금 배움.
