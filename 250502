# 학습 리포트 - 2025-05-02

## 학습 주제

Unity 개발 중 발생한 주요 트러블슈팅 사례들 정리

## 오늘 한 일

- Unity로 팀 프로젝트 진행 중 다양한 구현 오류를 겪으며 문제 해결
- 코드 로직보단 Unity 에디터 설정이나 기본 기능에 대한 이해 부족에서 발생한 실수들을 경험
- 주요 사례를 통해 Unity 내부 동작 방식과 디버깅 전략의 중요성 학습

## 주요 트러블슈팅 경험

### 1. 씬 전환 관련 네임스페이스를 몰라 비효율적 구현

- Unity에서는 `using UnityEngine.SceneManagement;`로 제공되는 `SceneManager.LoadScene()` 기능이 있음
- 이를 모르고 직접 씬 전환 기능을 구현하는 클래스를 작성했음
- 나중에 해당 네임스페이스의 존재를 알고 나서 기존 구현이 불필요하단 걸 인식
- Unity의 기본 기능을 먼저 숙지하는 것이 우선되어야 한다는 교훈

### 2. 버튼 이벤트 연결 누락

- UI 버튼 클릭 시 아무런 반응이 없었음
- 코드에는 오류가 없었고 에러 메시지나 디버그 로그도 없어 원인 파악이 어려웠음
- 결국 Unity 에디터에서 버튼의 OnClick 이벤트에 메서드를 연결하지 않은 것이 원인
- UI 관련 문제는 코드뿐 아니라 에디터 설정도 꼼꼼히 확인해야 한다는 것을 배움

### 3. 오브젝트 위치 설정 실수로 방향 회전 반영 실패

- 캐릭터가 바라보는 방향에 따라 공격하는 기능 구현 중, 방향이 제대로 반영되지 않는 문제 발생
- rotZ 값을 제대로 못 받는 이유를 코드에서만 찾으려 함
- 알고 보니 공격 방향을 담당하는 Empty 오브젝트를 플레이어 오브젝트 내부에 넣지 않았던 것이 원인
- Unity는 구조적 설정 실수도 에러 없이 넘어가기 때문에 시각적으로도 계층 구조를 꼼꼼히 확인해야 함

## 느낀 점

- Unity에서 발생하는 문제는 코드보다 에디터 설정 실수인 경우가 많다
- 디버그 로그나 에러 메시지가 없을 경우 코드에만 집중하는 건 비효율적
- 내장 기능과 구조를 잘 알고 활용하는 것이 시간 절약의 핵심
- 실수를 통해 Unity 개발 환경에 대한 이해도가 높아졌다
